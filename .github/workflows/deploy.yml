# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CD

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, Linux, X64, patient2]

    env:
      DB_SERVER_DEV: ${{ secrets.DB_SERVER_DEV }}
      DB_DATABASE_DEV: ${{ secrets.DB_DATABASE_DEV }}
      DB_DATABASE_PORT: ${{ secrets.DB_DATABASE_PORT }}
      DB_USERNAME_DEV: ${{ secrets.DB_USERNAME_DEV }}
      DB_PASSWORD_DEV: ${{ secrets.DB_PASSWORD_DEV }}

    steps:
      - uses: actions/checkout@v4
      - name: echo
        run: |
          echo "hello world"
          pwd
          ls -la
          git status

      - name: Create .env file from GitHub Secrets
        run: |
          echo "DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}" >> .env
          echo "DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}" >> .env
          echo "DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}" >> .env
          echo "DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}" >> .env
          echo "DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}" >> .env
          echo "DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}" >> .env

      - name: check .env file exists
        run: |
          ls -la

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.dev -t patient_service_dev_timothy .
          docker build --no-cache -f Dockerfile.dev -t patient_service_dev_timothy .
