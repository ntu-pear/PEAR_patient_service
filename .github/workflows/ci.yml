name: CI

on:
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: patient_staging_test
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.19'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Create .env file with ALL required variables
      - name: Create .env file
        run: |
          cat <<EOF > .env
          # Database
          DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}
          DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}
          DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}
          DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}
          DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}
          DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}
          
          # Cloudinary
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          
          # Web
          WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}
          
          # RabbitMQ
          RABBITMQ_HOST=localhost
          RABBITMQ_PORT=5672
          RABBITMQ_USER=testuser
          RABBITMQ_PASS=testpassword
          RABBITMQ_VIRTUAL_HOST=/
          RABBITMQ_DEFAULT_USER=testuser
          RABBITMQ_DEFAULT_PASS=testpassword
          EOF
          
          # Verify .env was created
          cat .env | grep -v 'PASSWORD' # Print non-sensitive vars for debugging

      - name: Start RabbitMQ
        run: |

          # Create configuration directory and file
          mkdir -p rabbitmq-config
          cat << EOF > rabbitmq-config/rabbitmq.conf
          # Disable cluster peer discovery
          cluster_formation.peer_discovery_backend = classic_config
            
          # Create a custom entrypoint script
          cat << 'EOF' > rabbitmq-entrypoint.sh
          #!/bin/bash
          set -e
          
          # Fix cookie permissions
          mkdir -p /var/lib/rabbitmq
          echo "TESTCOOKIE123" > /var/lib/rabbitmq/.erlang.cookie
          chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
          chmod 600 /var/lib/rabbitmq/.erlang.cookie
          
          # Start RabbitMQ
          exec docker-entrypoint.sh rabbitmq-server
          EOF
          
          chmod +x rabbitmq-entrypoint.sh
          
          # Start container with more verbose logging
          docker run -d \
            --name rabbitmq \
            --memory="800m" \
            -e RABBITMQ_ERLANG_COOKIE="TESTCOOKIE123" \
            -e RABBITMQ_DEFAULT_USER=testuser \
            -e RABBITMQ_DEFAULT_PASS=testpassword \
            -e RABBITMQ_LOGS="-" \
            -e RABBITMQ_SASL_LOGS="-" \
            -v $(pwd)/rabbitmq-entrypoint.sh:/usr/local/bin/custom-entrypoint \
            --entrypoint /usr/local/bin/custom-entrypoint \
            -p 5672:5672 \
            192.168.188.184:5000/rabbitmq_service_dev:latest
          
          # Show container logs immediately
          docker logs -f rabbitmq &
          
          # Wait for RabbitMQ to be ready
          for i in {1..30}; do
            if docker exec rabbitmq rabbitmq-diagnostics -q ping >/dev/null 2>&1; then
              echo "RabbitMQ is ready!"
              docker exec rabbitmq rabbitmqctl status
              break
            fi
            echo "Waiting for RabbitMQ to start... ($i/30)"
            sleep 2
            
            # Check if container is still running
            if ! docker ps | grep -q rabbitmq; then
              echo "RabbitMQ container crashed! Logs:"
              docker logs rabbitmq
              exit 1
            fi
          done
          
          if [ $i -eq 30 ]; then
            echo "RabbitMQ failed to start within 60 seconds"
            docker logs rabbitmq
            exit 1
          fi

      - name: Verify RabbitMQ
        run: |
          docker ps -a
          nc -vz localhost 5672
          docker exec rabbitmq rabbitmqctl list_users

      # Run tests with all environment variables available
      - name: Run pytest
        run: |
          pytest -v

      # Cleanup
      - name: Clean up containers
        if: always()
        run: |
          docker stop rabbitmq || true
          docker rm rabbitmq || true
