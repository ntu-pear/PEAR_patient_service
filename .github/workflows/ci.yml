name: CI

on:
  pull_request:
    branches: ['**']

permissions:
  contents: read

jobs:
  pre_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create rabbitmq.conf for classic mode
        run: echo "cluster_formation.peer_discovery_backend = classic_config" > rabbitmq.conf

      - name: Upload config as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-conf
          path: rabbitmq.conf

  build:
    needs: pre_check
    runs-on: patient_staging_test
    env: 
      RABBITMQ_IMAGE_REPOSITORY: ${{ secrets.RABBITMQ_IMAGE_REPOSITORY }}
      
    services:
      rabbitmq:
        image: 192.168.188.184:5000/rabbitmq_service_dev:latest
        ports:
          - 5672:5672    # AMQP port for test scripts to connect
        volumes:
          - ${{ github.workspace }}/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf # Override peer discovery k8 clustering

    steps:
      - uses: actions/checkout@v4
      
      - name: Download rabbitmq.conf artifact
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-conf

      - name: Set up Python 3.9.19
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.19'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test env var
        run: |
          echo "$RABBITMQ_IMAGE_REPOSITORY"
          cat /etc/docker/daemon.json

      # Only include whats needed by the application
      - name: Create .env file from GitHub Secrets
        run: |
          echo "DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}" >> .env
          echo "DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}" >> .env
          echo "DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}" >> .env
          echo "DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}" >> .env
          echo "DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}" >> .env
          echo "DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}" >> .env
          echo "RABBITMQ_HOST=localhost" >> .env                            # For integration test
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "RABBITMQ_VIRTUAL_HOST=${{ secrets.RABBITMQ_VIRTUAL_HOST }}" >> .env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}" >> .env

      - name: Check RabbitMQ service logs
        run: |
          docker ps -a
          docker logs $(docker ps -q --filter "ancestor=192.168.188.184:5000/rabbitmq_service_dev:latest")

      - name: Test RabbitMQ port
        run: |
          nc -vz localhost 5672

      - name: Check RabbitMQ status
        run: |
          rabbitmqctl status || echo "rabbitmqctl not found"

      - name: Test with pytest
        run: |
          pytest

          