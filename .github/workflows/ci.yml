name: CI

on:
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: patient_staging_test
    env: 
      # Only include whats needed by the actions runner
      RABBITMQ_IMAGE_REPOSITORY: ${{ secrets.RABBITMQ_IMAGE_REPOSITORY }}
      RABBITMQ_CLUSTER_FORMATION_PEER_DISCOVERY_BACKEND: "classic_config"  # override K8 pear discovery since integration does not need it
      
    services:
      rabbitmq:
        image: 192.168.188.184:5000/rabbitmq_service_dev:latest
        ports:
          - 5672:5672    # AMQP port for test scripts to connect
        
        env:
          RABBITMQ_DEFAULT_USER: testuser
          RABBITMQ_DEFAULT_PASS: testpassword
          

    #services:
    #  rabbitmq:
    #    image: 192.168.188.184:5000/rabbitmq_service_dev:latest
    #    ports:
    #      - 5672:5672
    #    env:
    #      RABBITMQ_DEFAULT_USER: testuser
    #      RABBITMQ_DEFAULT_PASS: testpassword
    #  
    #    options: >-
    #      --health-cmd="rabbitmqctl status"
    #      --health-interval=10s
    #      --health-timeout=5s
    #      --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9.19
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.19'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


      - name: Copy rabbitmq.conf into service container
        run: |
          docker cp ./rabbitmq.conf $(docker ps -qf "ancestor=192.168.188.184:5000/rabbitmq_service_dev:latest"):/etc/rabbitmq/rabbitmq.conf
          docker restart $(docker ps -qf "ancestor=192.168.188.184:5000/rabbitmq_service_dev:latest")

      
      # Only include whats needed by the application
      - name: Create .env file from GitHub Secrets
        run: |
          echo "DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}" >> .env
          echo "DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}" >> .env
          echo "DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}" >> .env
          echo "DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}" >> .env
          echo "DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}" >> .env
          echo "DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}" >> .env

          echo "RABBITMQ_HOST=rabbitmq" >> $GITHUB_ENV
          echo "RABBITMQ_PORT=5672" >> $GITHUB_ENV
          echo "RABBITMQ_USER=testuser" >> $GITHUB_ENV
          echo "RABBITMQ_PASS=testpassword" >> $GITHUB_ENV
          echo "RABBITMQ_VIRTUAL_HOST=/" >> $GITHUB_ENV

      - name: Check RabbitMQ service logs
        run: |
          docker ps -a
          docker logs $(docker ps -q --filter "ancestor=192.168.188.184:5000/rabbitmq_service_dev:latest")

      - name: Test RabbitMQ port
        run: |
          nc -vz localhost 5672

      - name: Check RabbitMQ status
        run: |
          rabbitmqctl status || echo "rabbitmqctl not found"

      - name: Test with pytest
        run: |
          pytest

