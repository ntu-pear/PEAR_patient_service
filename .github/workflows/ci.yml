name: CI

on:
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: patient_staging_test
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.19'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Create .env file with ALL required variables
      - name: Create .env file
        run: |
          cat <<EOF > .env
          # Database
          DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}
          DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}
          DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}
          DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}
          DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}
          DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}
          
          # Cloudinary
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          
          # Web
          WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}
          
          # RabbitMQ
          RABBITMQ_HOST=localhost
          RABBITMQ_PORT=5672
          RABBITMQ_USER=testuser
          RABBITMQ_PASS=testpassword
          RABBITMQ_VIRTUAL_HOST=/
          EOF
          
          # Verify .env was created
          cat .env | grep -v 'PASSWORD' # Print non-sensitive vars for debugging

      - name: Start RabbitMQ
        run: |
          # Create minimal configuration
          mkdir -p rabbitmq-config
          cat << EOF > rabbitmq-config/rabbitmq.conf
          # Disable clustering
          cluster_formation.peer_discovery_backend = classic_config
          cluster_formation.classic_config.nodes.1 = rabbit@localhost
          
          # Enable plugins
          management.load_definitions = /etc/rabbitmq/definitions.json
          EOF

          # Create user definitions
          cat << EOF > rabbitmq-config/definitions.json
          {
            "users": [{
              "name": "testuser",
              "password": "testpassword",
              "tags": "administrator"
            }],
            "vhosts": [{
              "name": "/"
            }],
            "permissions": [{
              "user": "testuser",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }]
          }
          EOF

          # Start RabbitMQ with configuration
          docker run -d \
            --name rabbitmq \
            --memory="800m" \
            -e RABBITMQ_ERLANG_COOKIE="TESTCOOKIE123" \
            -v $(pwd)/rabbitmq-config:/etc/rabbitmq \
            -p 5672:5672 \
            -p 15672:15672 \
            192.168.188.184:5000/rabbitmq_service_dev:latest

          # Wait for RabbitMQ to be fully ready
          for i in {1..15}; do
            if nc -z localhost 5672 && \
               docker exec rabbitmq rabbitmq-diagnostics -q ping >/dev/null 2>&1; then
              echo "RabbitMQ is ready!"
              docker exec rabbitmq rabbitmqctl list_users
              break
            fi
            echo "Waiting for RabbitMQ to start... ($i/15)"
            sleep 2
            
            # Check if container crashed
            if ! docker ps | grep -q rabbitmq; then
              echo "RabbitMQ container crashed! Logs:"
              docker logs rabbitmq
              exit 1
            fi
          done

          if [ $i -eq 15 ]; then
            echo "RabbitMQ failed to start within 30 seconds"
            docker logs rabbitmq
            exit 1
          fi

      - name: Run pytest
        run: |
          pytest -v

      - name: Clean up containers
        if: always()
        run: |
          docker stop rabbitmq || true
          docker rm rabbitmq || true