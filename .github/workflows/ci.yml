name: CI

on:
  # push:
  #   branches: ['**']
  pull_request:
    branches: ['**']

permissions:
  contents: read

jobs:
  build:
    runs-on: patient_staging_test
    env: 
      # Only include whats needed by the actions runner
      RABBITMQ_CLUSTER_FORMATION_PEER_DISCOVERY_BACKEND: "classic_config"  # override K8 pear discovery since integration does not need it
      RABBITMQ_IMAGE: ${{ secrets.RABBITMQ_IMAGE_REPOSITORY }}/rabbitmq_service_dev:latest
    


    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.9.19
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.19'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Only include whats needed by the application
      - name: Create .env file from GitHub Secrets
        run: |
          echo "DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}" >> .env
          echo "DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}" >> .env
          echo "DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}" >> .env
          echo "DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}" >> .env
          echo "DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}" >> .env
          echo "DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}" >> .env
          echo "RABBITMQ_HOST=localhost" >> .env                            # For integration test
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}" >> .env
          echo "RABBITMQ_VIRTUAL_HOST=${{ secrets.RABBITMQ_VIRTUAL_HOST }}" >> .env

      - name: Pull RabbitMQ image
        run: docker pull "$RABBITMQ_IMAGE"

      - name: Start RabbitMQ container
        run: docker run -d --name rabbitmq -p 5672:5672 "$RABBITMQ_IMAGE"

      - name: Wait for RabbitMQ to be healthy
        run: |
          echo "Waiting for RabbitMQ to be healthy..."
          for i in {1..30}; do
            if docker exec rabbitmq rabbitmq-diagnostics check_running >/dev/null 2>&1; then
              echo "RabbitMQ is running!"
              exit 0
            fi
            echo "RabbitMQ not ready yet... ($i/30)"
            sleep 2
          done
          echo "RabbitMQ failed to become healthy in time" >&2
          docker logs rabbitmq
          exit 1

      - name: Test with pytest
        run: |
          pytest

      - name: Stop and remove RabbitMQ
        if: always()
        run: |
          docker stop rabbitmq || true
          docker rm rabbitmq || true