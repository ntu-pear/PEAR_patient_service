name: CI

on:
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: patient_staging_test
    env:
      # DRAFTING, to shift this properly after testing
      # Secrets
      RABBITMQ_IMAGE_REPOSITORY: ${{ secrets.RABBITMQ_IMAGE_REPOSITORY }}
      SCHEDULER_IMAGE_REPOSITORY: "192.168.188.173:5000"
      ACTIVITY_IMAGE_REPOSITORY: "192.168.188.186:5000"

      # Var
      SCHEDULER_IMAGE_NAME: "pear_schedule:latest"
      ACTIVITY_IMAGE_NAME: "activity_service_dev:latest"

    steps:
      - uses: actions/checkout@v4
      
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9.19'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Create .env file
        run: |
          cat <<EOF > .env
          # Database
          DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}
          DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}
          DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}
          DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}
          DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}
          DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}
          
          # Cloudinary
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          
          # Web
          WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}
          
          # RabbitMQ
          RABBITMQ_HOST=localhost
          RABBITMQ_PORT=5672
          RABBITMQ_USER=testuser
          RABBITMQ_PASS=testpassword
          RABBITMQ_VIRTUAL_HOST=/
          RABBITMQ_DEFAULT_USER=testuser
          RABBITMQ_DEFAULT_PASS=testpassword
          EOF
          grep -v 'PASSWORD' .env
      
      - name: Pull Docker images
        run: |
      
          # RabbitMQ
          docker pull ${RABBITMQ_IMAGE_REPOSITORY}/rabbitmq_service_dev:latest
          # Activity Service
          docker pull ${ACTIVITY_IMAGE_REPOSITORY}/${ACTIVITY_IMAGE_NAME}
          # Scheduler Service
          docker pull ${SCHEDULER_IMAGE_REPOSITORY}/${SCHEDULER_IMAGE_NAME}

      - name: Create Docker network
        run: docker network create integration-test-net || true

      - name: Start RabbitMQ
        run: |
        
          # Create configuration directory and file
          mkdir -p rabbitmq-config
          cat << EOF > rabbitmq-config/rabbitmq.conf
          # Disable cluster peer discovery
          cluster_formation.peer_discovery_backend = classic_config

          
          # Enable management plugin
          management.tcp.port = 15672
          management.tcp.ip = 0.0.0.0
          
          # Log to stdout
          log.console = true
          log.console.level = info
          EOF

          # Create a custom entrypoint script to handle cookie permissions
          cat << 'EOF' > rabbitmq-entrypoint.sh
          #!/bin/bash
          set -e
          
          # Ensure directory exists
          mkdir -p /var/lib/rabbitmq
          
          # Set Erlang cookie with proper permissions
          echo "TESTCOOKIE123" > /var/lib/rabbitmq/.erlang.cookie
          chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
          chmod 600 /var/lib/rabbitmq/.erlang.cookie
          
          
          # Start RabbitMQ
          exec docker-entrypoint.sh rabbitmq-server
          EOF
          
          chmod +x rabbitmq-entrypoint.sh
          
          # Start container with configuration
          docker run -d \
            --name rabbitmq \
            --memory="800m" \
            -e RABBITMQ_ERLANG_COOKIE="TESTCOOKIE123" \
            -e RABBITMQ_DEFAULT_USER=testuser \
            -e RABBITMQ_DEFAULT_PASS=testpassword \
            -v $(pwd)/rabbitmq-config:/etc/rabbitmq \
            -v $(pwd)/rabbitmq-entrypoint.sh:/usr/local/bin/custom-entrypoint \
            --entrypoint /usr/local/bin/custom-entrypoint \
            -p 5672:5672 \
            -p 15672:15672 \
            192.168.188.184:5000/rabbitmq_service_dev:latest
      
      - name: Start Activity service
        run: |
          
          docker run -d \
            --name activity \
            --network integration-test-net \
            --env-file .env \
            ${ACTIVITY_IMAGE_REPOSITORY}/${ACTIVITY_IMAGE_NAME}

      - name: Start Scheduler service
        run: |
          
          docker run -d \
            --name scheduler \
            --network integration-test-net \
            --env-file .env \
            ${SCHEDULER_IMAGE_REPOSITORY}/${SCHEDULER_IMAGE_NAME}

      - name: Run Pytests
        run: |
          python -m pytest

      - name: Cleanup
        if: always()
        run: |
          docker stop rabbitmq || true
          docker rm rabbitmq || true